class DisjointSetUnion
{
    vector<int> size, parent;
    int n;

public:
    vector<vector<int>> clusters;
    DisjointSetUnion(int N)
    {
        size.resize(N, 1);
        parent.resize(N, 0);
        n = N;
        for (int i = 0; i < N; i++)
        {
            parent[i] = i;
        }
    }

    int findParent(int u)
    {
        if (u == parent[u])
            return u;

        return parent[u] = findParent(parent[u]);
    }

    void unionBySize(int u, int v)
    {
        int urep = findParent(u);
        int vrep = findParent(v);

        if (urep == vrep)
            return;

        if (size[urep] < size[vrep])
        {
            parent[urep] = vrep;
            size[vrep] += size[urep];
        }
        else
        {
            parent[vrep] = urep;
            size[urep] += size[vrep];
        }
    }

    // (might need some changes)better to call this functions once all the DSU operations are done
    void makeClusters()
    {
        int N = -1;
        vector<int> posParent(n, -1);
        for (int i = 0; i < n; i++)
        {
            int par = findParent(i);
            if (posParent[par] == -1)
            {
                clusters.push_back({});
                posParent[par] = ++N;
            }

            clusters[posParent[par]].push_back(i);
        }
    };
};
