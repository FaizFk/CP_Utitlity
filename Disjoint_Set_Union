class DisjointSetUnion
{
    vector<int> size, parent;

public:
    DisjointSetUnion(int n)
    {
        size.resize(n + 1, 1);
        parent.resize(n + 1, 0);
        for (int i = 1; i <= n; i++)
        {
            parent[i] = i;
        }
    }

    int findParent(int u)
    {
        if (u == parent[u])
            return u;

        return parent[u] = findParent(parent[u]);
    }

    void unionbysize(int u, int v)
    {
        int urep = findParent(u);
        int vrep = findParent(v);

        if (urep == vrep)
            return;
            
        if (size[urep] < size[vrep])
        {
            parent[urep] = vrep;
            size[vrep] += size[urep];
        }
        else
        {
            parent[vrep] = urep;
            size[urep] += size[vrep];
        }
    }

};
