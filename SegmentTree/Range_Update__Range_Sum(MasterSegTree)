// This may need some refining but it works I guess...

class SegmentTree
{
    // assingflag[node]: node values has to be assigned to some value
    vector<ll> tree, lazy, assignflag;
    int size = 127;

public:
    SegmentTree(vector<int> arr)
    {
        while (__builtin_popcount(arr.size()) != 1)
        {
            // operation specific
            arr.push_back(0);
        }

        int n = arr.size();
        size = n - 1;
        tree.resize(2 * n);
        lazy.resize(2 * n);
        assignflag.resize(2 * n);

        for (int i = 0; i < n; i++)
        {
            tree[n + i] = arr[i];
        }

        for (int i = n - 1; i >= 1; i--)
        {
            // operation specific
            tree[i] = tree[2 * i] + tree[2 * i + 1];
        }
    }

    void propogate(int node, int node_low, int node_high)
    {
        if (node_low == node_high)
        {
            if (assignflag[node])
            {
                tree[node] = lazy[node];
                lazy[node] = 0;
                assignflag[node] = 0;
            }
            else
            {
                tree[node] += lazy[node];
                lazy[node] = 0;
            }
        }
        else
        {
            if (assignflag[node])
            {
                tree[node] = (node_high - node_low + 1) * lazy[node];
                lazy[2 * node] = lazy[node];
                lazy[2 * node + 1] = lazy[node];
                assignflag[2 * node] = 1;
                assignflag[2 * node + 1] = 1;
                lazy[node] = 0;
                assignflag[node] = 0;
            }
            else
            {
                tree[node] += (node_high - node_low + 1) * lazy[node];
                lazy[2 * node] += lazy[node];
                lazy[2 * node + 1] += lazy[node];
                lazy[node] = 0;
            }
        }
    }

    ll query(int query_low, int query_high)
    {
        return query(1, 0, size, query_low, query_high);
    }

    ll query(int node, int node_low, int node_high, int query_low, int query_high)
    {
        propogate(node, node_low, node_high);
        // operation specific
        if (node_high < query_low || query_high < node_low)
            return 0;

        if (query_low <= node_low && node_high <= query_high)
            return tree[node];

        int mid = (node_low + node_high) >> 1;

        // operation specific
        return query(2 * node, node_low, mid, query_low, query_high) +
               query(2 * node + 1, mid + 1, node_high, query_low, query_high);
    }

    void update(int query_left, int query_right, int v, int assign = 0)
    {
        update(1, 0, size, query_left, query_right, v, assign);
    }

    void update(int node, int node_low, int node_high, int query_low, int query_high, int v, int assign)
    {
        propogate(node, node_low, node_high);
        if (node_high < query_low || query_high < node_low)
            return;

        if (query_low <= node_low && node_high <= query_high)
        {
            // operation specific
            lazy[node] = assign ? v : lazy[node] + v;
            assignflag[node] = assign;
            propogate(node, node_low, node_high);
            return;
        }

        int mid = (node_low + node_high) >> 1;

        update(2 * node, node_low, mid, query_low, query_high, v, assign);
        update(2 * node + 1, mid + 1, node_high, query_low, query_high, v, assign);

        // operation specific
        tree[node] = tree[2 * node] + tree[2 * node + 1];
    }
};
