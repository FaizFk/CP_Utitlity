//In this when we make tree, we only fill last layer, and when querying we keep adding node value to it

class SegmentTree
{
    vector<ll> tree;
    int size = 5;

public:
    SegmentTree(vector<int> arr)
    {
        while (__builtin_popcount(arr.size()) != 1)
        {
            // operation specific
            arr.push_back(0);
        }

        int n = arr.size();
        size = n - 1;
        tree.resize(2 * n);

        for (int i = 0; i < n; i++)
        {
            tree[n + i] = arr[i];
        }
    }

    ll query(int index)
    {
        return query(1, 0, size, index, index);
    }

    ll query(int node, int node_low, int node_high, int query_low, int query_high)
    {
        if (query_low <= node_low && node_high <= query_high)
            return tree[node];

        // operation specific
        if (node_high < query_low || query_high < node_low)
            return 0;

        int mid = (node_low + node_high) >> 1;

        // operation specific
        return tree[node]+query(2 * node, node_low, mid, query_low, query_high) +
               query(2 * node + 1, mid + 1, node_high, query_low, query_high);
              
    }

    void update(int query_low, int query_high, int v)
    {
        update(1, 0, size, query_low, query_high, v);
    }

    void update(int node, int node_low, int node_high, int query_low, int query_high, int v)
    {
        if (query_low <= node_low && node_high <= query_high)
        {
            // operation specific
            tree[node] += v;
            return;
        }

        if (node_high < query_low || query_high < node_low)
            return;

        int mid = (node_low + node_high) >> 1;

        update(2 * node, node_low, mid, query_low, query_high, v);
        update(2 * node + 1, mid + 1, node_high, query_low, query_high, v);
    }
};
